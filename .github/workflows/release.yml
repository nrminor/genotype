name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*' # Allow pre-release tags like v1.0.0-alpha, v1.0.0-beta.1

permissions:
  contents: write
  packages: write

jobs:
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for accurate release notes
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      
      - name: Install dependencies
        run: bun install
      
      - name: Run validation
        run: bun run validate
      
      - name: Build TypeScript library
        run: bun run build
      
      # Commented out until examples are ready
      # - name: Build examples
      #   run: |
      #     mkdir -p examples/dist
      #     # Build example scripts that demonstrate library usage
      #     bun run build:examples
      
      - name: Create distribution archive
        run: |
          mkdir -p dist-archive
          cp -r dist/ dist-archive/
          cp package.json dist-archive/
          cp README.md dist-archive/
          cp LICENSE* dist-archive/ 2>/dev/null || true
          # Commented out until examples are ready
          # cp -r examples/dist/ dist-archive/examples/ 2>/dev/null || true
          tar -czf genotype-dist.tar.gz -C dist-archive .
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: genotype-build
          path: genotype-dist.tar.gz
          retention-days: 90

  # Wait for native builds to complete
  wait-for-native-builds:
    name: Wait for Native Builds
    runs-on: ubuntu-latest
    steps:
      - name: Wait for build workflow
        uses: fountainhead/action-wait-for-check@v1.2.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: 'Build Native Modules'
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          timeoutSeconds: 1800 # 30 minutes
        continue-on-error: true
      
      - name: Check if native builds completed
        run: |
          if [ "${{ steps.wait-for-build.outputs.conclusion }}" != "success" ]; then
            echo "Native builds did not complete successfully, proceeding with TypeScript-only release"
            echo "NATIVE_BUILDS_FAILED=true" >> $GITHUB_ENV
          else
            echo "Native builds completed successfully"
            echo "NATIVE_BUILDS_FAILED=false" >> $GITHUB_ENV
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-artifacts, wait-for-native-builds]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for accurate release notes

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release
          if [[ "$VERSION" =~ -(alpha|beta|rc|pre) ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify version in package.json
        run: |
          PACKAGE_VERSION=$(grep '"version"' package.json | sed 's/.*"version": "\([^"]*\)".*/\1/')
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "❌ Version mismatch!"
            echo "Tag version: ${{ steps.version.outputs.version }}"
            echo "Package.json version: $PACKAGE_VERSION"
            echo ""
            echo "Please update package.json version to match the git tag."
            exit 1
          else
            echo "✅ Version verified: ${{ steps.version.outputs.version }}"
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: genotype-build
          path: ./artifacts

      # Download native build artifacts if they exist
      - name: Download native artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          pattern: genotype-*
          path: ./native-artifacts
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          # Create comprehensive release notes
          cat > RELEASE_NOTES.md << 'EOF'
          ## GenoType ${{ steps.version.outputs.version }}
          
          ### What's New
          
          This release includes improvements to the GenoType bioinformatics library for TypeScript.
          
          ### 📦 Distribution Files
          
          - `genotype-dist.tar.gz` - Complete TypeScript library distribution
          
          ### 🔧 Native Modules
          
          Native performance modules for genomic data processing:
          EOF
          
          # Check for native artifacts and list them
          if [ -d "./native-artifacts" ] && [ "$(find ./native-artifacts -name 'genotype-*' -type d | wc -l)" -gt 0 ]; then
            echo "" >> RELEASE_NOTES.md
            for platform_dir in ./native-artifacts/genotype-*; do
              if [ -d "$platform_dir" ]; then
                platform=$(basename "$platform_dir" | sed 's/genotype-//')
                echo "- \`$platform\` - Native module for $platform" >> RELEASE_NOTES.md
              fi
            done
          else
            echo "" >> RELEASE_NOTES.md
            echo "⚠️ Native modules are not yet available for this release." >> RELEASE_NOTES.md
            echo "The TypeScript implementation provides full functionality." >> RELEASE_NOTES.md
          fi
          
          cat >> RELEASE_NOTES.md << 'EOF'
          
          ### 🧬 Usage
          
          ```bash
          bun add github:nrminor/genotype@${{ steps.version.outputs.tag }}
          ```
          
          ```typescript
          import { seqops } from "genotype";
          
          const results = await seqops(sequences)
            .filter({ minLength: 100 })
            .transform({ reverseComplement: true })
            .writeFasta("output.fasta");
          ```
          
          ### 📚 Documentation
          
          - [API Documentation](https://nrminor.github.io/genotype/)
          - [GitHub Repository](https://github.com/nrminor/genotype)
          
          ### ⚠️ Pre-Alpha Software
          
          This is pre-alpha software. Breaking changes should be expected.
          The FASTQ and FASTA parsing along with the SeqOps API are the most stable components.
          
          ---
          
          **Full Changelog**: https://github.com/nrminor/genotype/compare/v0.1.0...${{ steps.version.outputs.tag }}
          EOF

      # Commented out until we have examples ready
      # - name: Package examples
      #   run: |
      #     if [ -d "examples/dist" ]; then
      #       tar -czf genotype-examples.tar.gz -C examples/dist .
      #     fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: GenoType ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ steps.version.outputs.prerelease }}
          files: |
            ./artifacts/genotype-dist.tar.gz
            ./native-artifacts/genotype-*/
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release with build information
        run: |
          # Get the upload URL from the release
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          
          # Log release creation success
          echo "✅ Release created successfully!"
          echo "🔗 Release URL: ${{ steps.create_release.outputs.url }}"
          echo "📋 Release ID: ${{ steps.create_release.outputs.id }}"
          
          # Add comment about native modules status
          if [ "${{ env.NATIVE_BUILDS_FAILED }}" = "true" ]; then
            echo "⚠️ Native modules were not included in this release due to build issues."
            echo "The TypeScript implementation provides full functionality."
          else
            echo "✅ Native modules included for enhanced performance."
          fi