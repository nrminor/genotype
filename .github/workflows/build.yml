name: Build Native Modules
on:
  push:
    tags: ['v*']
    paths:
      # Native Rust source code
      - 'src/native/**/*.rs'
      - 'src/native/**/Cargo.toml'
      - 'Cargo.toml'
      # Rust toolchain configuration
      - 'rust-toolchain*'
      - '.rustfmt.toml'
      - 'rustfmt.toml'
      - 'clippy.toml'
      - '.clippy.toml'
      - 'Cross.toml'
      # TypeScript FFI integration
      - 'src/native.ts'
      # Build scripts that handle native modules
      - 'scripts/build.mjs'
      - 'scripts/*native*'
  pull_request:
    paths:
      # Same paths for PR validation
      - 'src/native/**/*.rs'
      - 'src/native/**/Cargo.toml'
      - 'Cargo.toml'
      - 'rust-toolchain*'
      - '.rustfmt.toml'
      - 'rustfmt.toml'
      - 'clippy.toml'
      - '.clippy.toml'
      - 'Cross.toml'
      - 'src/native.ts'
      - 'scripts/build.mjs'
      - 'scripts/*native*'
  workflow_dispatch:

env:
  RUST_TOOLCHAIN: stable

jobs:
  build-native:
    name: Build ${{ matrix.platform }}
    strategy:
      matrix:
        include:
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: linux-arm64  
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - platform: darwin-x64
            os: macos-latest
            target: x86_64-apple-darwin
          - platform: darwin-arm64
            os: macos-latest 
            target: aarch64-apple-darwin
          - platform: win32-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: win32-arm64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.target }}
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "src/native"
          key: ${{ matrix.target }}
      
      # For cross-compilation on Ubuntu (ARM64 targets)
      - name: Install cross-compilation tools
        if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'aarch64')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Build native module
        run: cargo build --manifest-path src/native/Cargo.toml --release --target ${{ matrix.target }}
      
      - name: Prepare artifacts (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p artifacts/${{ matrix.platform }}
          cp target/${{ matrix.target }}/release/libgenotype.* artifacts/${{ matrix.platform }}/ 2>/dev/null || true
          cp target/${{ matrix.target }}/release/*.so artifacts/${{ matrix.platform }}/ 2>/dev/null || true
          cp target/${{ matrix.target }}/release/*.dylib artifacts/${{ matrix.platform }}/ 2>/dev/null || true
          ls -la artifacts/${{ matrix.platform }}/
      
      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir -p artifacts/${{ matrix.platform }}
          cp target/${{ matrix.target }}/release/*.dll artifacts/${{ matrix.platform }}/ 2>$null || true
          ls artifacts/${{ matrix.platform }}/
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: genotype-${{ matrix.platform }}
          path: artifacts/${{ matrix.platform }}
          retention-days: 7

  # Commented out until we have examples ready
  # build-examples:
  #   name: Build Examples
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     
  #     - name: Setup Bun
  #       uses: oven-sh/setup-bun@v2
  #       with:
  #         bun-version: latest
  #     
  #     - name: Install dependencies
  #       run: bun install
  #     
  #     - name: Build examples
  #       run: bun run build:examples
  #     
  #     - name: Upload example artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: genotype-examples
  #         path: examples/dist/
  #         retention-days: 7