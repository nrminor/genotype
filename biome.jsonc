{
  // JSON Schema to provide LSP support for this particular JSON format
  "$schema": "https://biomejs.dev/schemas/2.2.2/schema.json",

  // Version control integrations, which in this case is Git
  "vcs": {
    "enabled": true,
    "clientKind": "git",
    "useIgnoreFile": false
  },

  // How biome is and isn't allowed to interact with files
  "files": {
    "ignoreUnknown": true,
    "includes": [
      "**",
      "src/**/*.ts",
      "!docs/",
      "!dist/",
      "!dist/*.js",
      "!**/dist/",
      "!**/*.d.ts",
      "!**/node_modules/",
      "!test/fixtures/",
      "!src/native/",
      "!reports/**/*",
      "!**/*.backup*",
      "!**/backup*/**/*"
    ]
  },

  // formatter settings
  "formatter": {
    "enabled": true,
    "useEditorconfig": true,
    "formatWithErrors": true, // format even if errors are encountered
    "indentStyle": "space", // tabs who?
    "indentWidth": 2,
    "lineWidth": 100,
    "expand": "auto"
  },

  // linter settings and specific rule toggles
  "linter": {
    "enabled": true,
    "includes": ["src/**/*.ts", "!docs/", "!scripts/*.mjs", "!dist/*.js", "!src/formats/bam/*.ts"],
    "rules": {
      "recommended": true,
      "complexity": {
        "noAdjacentSpacesInRegex": "error",
        "noExtraBooleanCast": "error",
        "noUselessCatch": "error",
        "noUselessEscapeInRegex": "error",
        "noStaticOnlyClass": "warn"
      },
      "correctness": {
        "noUnusedImports": "error",
        "noConstAssign": "error",
        "noConstantCondition": "error",
        "noEmptyCharacterClassInRegex": "error",
        "noEmptyPattern": "error",
        "noGlobalObjectCalls": "error",
        "noInvalidBuiltinInstantiation": "error",
        "noInvalidConstructorSuper": "error",
        "noNonoctalDecimalEscape": "error",
        "noPrecisionLoss": "error",
        "noSelfAssign": "error",
        "noSetterReturn": "error",
        "noSwitchDeclarations": "error",
        "noUndeclaredVariables": "error",
        "noUnreachable": "error",
        "noUnreachableSuper": "error",
        "noUnsafeFinally": "error",
        "noUnsafeOptionalChaining": "error",
        "noUnusedLabels": "error",
        "noUnusedPrivateClassMembers": "error",
        "noUnusedVariables": "error",
        "noUnusedFunctionParameters": "error",
        "useIsNan": "error",
        "useValidForDirection": "error",
        "useValidTypeof": "error",
        "useYield": "error"
      },
      "suspicious": {
        "noAsyncPromiseExecutor": "error",
        "noCatchAssign": "error",
        "noClassAssign": "error",
        "noCompareNegZero": "error",
        "noControlCharactersInRegex": "error",
        "noImplicitAnyLet": "error",
        "noExplicitAny": "off",
        "noDebugger": "error",
        "noDuplicateCase": "error",
        "noDuplicateClassMembers": "error",
        "noDuplicateElseIf": "error",
        "noDuplicateObjectKeys": "error",
        "noDuplicateParameters": "error",
        "noEmptyBlockStatements": "error",
        "noFallthroughSwitchClause": "error",
        "noFunctionAssign": "error",
        "noGlobalAssign": "error",
        "noImportAssign": "error",
        "noIrregularWhitespace": "error",
        "noMisleadingCharacterClass": "error",
        "noPrototypeBuiltins": "error",
        "noRedeclare": "error",
        "noShadowRestrictedNames": "error",
        "noSparseArray": "error",
        "noUnsafeNegation": "error",
        "noWith": "error",
        "useGetterReturn": "error"
      }
    }
  },

  // Biome lumps Typescript into JavaScript, so these rules apply to both
  "javascript": {
    "formatter": {
      "jsxQuoteStyle": "double",
      "quoteProperties": "preserve",
      "trailingCommas": "es5",
      "semicolons": "always",
      "arrowParentheses": "always",
      "bracketSameLine": false,
      "quoteStyle": "double",
      "attributePosition": "auto",
      "bracketSpacing": true
    },

    // Depending on the runtime, the code may expect certain globals to be implicitly
    // imported and available in the namespaces as if via a prelude. Those globals
    // are explicitly added to the default minimum set understood by Biome.
    "globals": [
      "DecompressionStream",
      "console",
      "Bun",
      "Uint16Array",
      "ArrayBuffer",
      "TextEncoder",
      "AbortSignal",
      "Uint8Array",
      "AbortController",
      "ReadableStream",
      "TransformStream",
      "__dirname",
      "BufferEncoding",
      "TransformStreamDefaultController",
      "WritableStream",
      "Buffer",
      "TextDecoder",
      "crypto",
      "CompressionStream",
      "Uint32Array"
    ]
  },

  // do JSON too
  "json": { "formatter": { "enabled": true } },

  // Overrides are for applying different formatting and linting rules to different
  // subdirectories.
  //
  // Here, we currently just apply different looser rules to test files, though these
  // rules will eventually be tighted to the same level of strictness as the main library
  // source code files.
  "overrides": [
    {
      "includes": ["test/**/*.ts"],
      "javascript": {
        "globals": [
          "TextEncoder",
          "console",
          "performance",
          "expect",
          "Uint8Array",
          "AbortController",
          "ReadableStream",
          "TransformStream",
          "beforeEach",
          "afterEach",
          "setTimeout",
          "WritableStream",
          "Bun",
          "global",
          "Buffer",
          "process",
          "describe",
          "it",
          "TextDecoder",
          "test",
          "AbortSignal"
        ]
      },
      "linter": {
        "rules": {
          "complexity": { "noUselessEscapeInRegex": "off" },
          "correctness": {
            "noUndeclaredVariables": "off",
            "noUnusedVariables": "off"
          },
          "style": { "useConst": "error" },
          "suspicious": {
            "noExplicitAny": "warn",
            "noRedeclare": "off",
            "noVar": "error"
          }
        }
      }
    }
  ],

  // which code actions should be available
  "assist": {
    "enabled": true,
    "actions": {
      "source": {
        "organizeImports": "on",
        // "recommended": true,
        "useSortedKeys": "off",
        "useSortedAttributes": "off"
      }
    }
  }
}
